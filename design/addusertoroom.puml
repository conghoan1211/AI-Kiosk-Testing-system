@startuml
' Class Diagram for Add User To Room Feature

title Add Student To Room Class Diagram

hide empty members
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam defaultFontSize 14
skinparam defaultFontName Arial
skinparam classFontSize 12
skinparam classFontName Arial
skinparam noteFontSize 11
skinparam noteFontName Arial

skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
    FontSize 12
}

skinparam package {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    FontSize 14
    FontStyle bold
}

skinparam interface {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontSize 12
}

skinparam enum {
    BackgroundColor LightCyan
    BorderColor DarkCyan
    FontSize 12
}

package "Controllers" {
    class RoomUserController <<Controller>> {
        - _roomUserService: IRoomUserService
        + AddUserToRoom(roomId: string, userIdsOrCodes: List<string>): Task<IActionResult>
    }
}

package "Services" {
    interface IRoomUserService <<Interface>> {
        + AddStudentsToRoom(roomId: string, userIdsOrCodes: List<string>, usertoken: string): Task<(string, List<string>, List<string>, List<string>)>
    }
    class RoomUserService <<Service>> {
        - _context: DbContext
        - _logger: ILog
        + AddStudentsToRoom(roomId: string, userIdsOrCodes: List<string>, usertoken: string): Task<(string, List<string>, List<string>, List<string>)>
    }
    interface ILog <<Interface>> {
        + WriteActivity(log: AddUserLogVM): Task<string>
    }
}

package "Models & DTOs" {
    class AddUserLogVM <<DTO>> {
        + ActionType: string
        + Description: string
        + ObjectId: string
        + UserId: string
        + Metadata: string
        + Status: int
    }
}

package "Entities" {
    class RoomUser {
        + RoomUserId: string
        + RoomId: string
        + UserId: string
        + RoleId: int
        + Status: int
        + JoinTime: DateTime
    }
    class Room {
        + RoomId: string
    }
    class User {
        + UserId: string
        + UserCode: string
    }
}

package "Enums" {
    enum RoleEnum {
        Student
        Lecture
        Admin
    }
    enum ActiveStatus {
        Inactive
        Active
    }
    enum LogStatus {
        Success
        Failed
    }
}

' Relationships
RoomUserController ..> IRoomUserService : <<uses>>
RoomUserController ..> Room : <<uses>>
IRoomUserService <|.. RoomUserService
RoomUserService ..> RoomUser : <<creates>>
RoomUserService ..> Room : <<queries>>
RoomUserService ..> User : <<queries>>
RoomUserService ..> ILog : <<logs>>
RoomUserService ..> AddUserLogVM : <<logs>>
RoomUser o-- Room : <<for>>
RoomUser o-- User : <<for>>
RoomUser ..> RoleEnum : <<uses>>
RoomUser ..> ActiveStatus : <<uses>>
AddUserLogVM ..> LogStatus : <<uses>>

@enduml 