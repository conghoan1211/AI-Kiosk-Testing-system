@startuml
' Class Diagram for View Exam Monitor (Overview) Feature

title View Exam Monitor (Overview) Class Diagram

hide empty members
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam defaultFontSize 14
skinparam defaultFontName Arial
skinparam classFontSize 12
skinparam classFontName Arial
skinparam noteFontSize 11
skinparam noteFontName Arial

skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
    FontSize 12
}

skinparam package {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    FontSize 14
    FontStyle bold
}

skinparam interface {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontSize 12
}

skinparam enum {
    BackgroundColor LightCyan
    BorderColor DarkCyan
    FontSize 12
}

package "Controllers" {
    class MonitoringController <<Controller>> {
        - _monitoringService: IMonitoringService
        + GetExamOverview(search: MonitorExamSearchVM): Task<IActionResult>
    }
}

package "Services" {
    interface IMonitoringService <<Interface>> {
        + GetExamOverview(search: MonitorExamSearchVM, usertoken: string): Task<(string, SearchResult?)>
    }
    class MonitoringService <<Service>> {
        - _context: DbContext
        + GetExamOverview(search: MonitorExamSearchVM, usertoken: string): Task<(string, SearchResult?)>
    }
}

package "Models & DTOs" {
    class MonitorExamSearchVM <<DTO>> {
        + SubjectId: string
        + ExamStatus: ExamStatus?
        + PageSize: int
        + CurrentPage: int
        + TextSearch: string
    }
    class SearchRequestVM <<DTO>> {
        + PageSize: int
        + CurrentPage: int
        + TextSearch: string
    }
    class MonitorExamsVM <<DTO>> {
        + ExamId: string
        + RoomId: string
        + RoomCode: string
        + ClassId: string
        + ClassCode: string
        + SubjectName: string
        + Title: string
        + Description: string
        + Duration: int
        + StartTime: DateTime
        + EndTime: DateTime
        + ExamType: int
        + Status: int
        + CreateUserId: string
        + CreateUserName: string
        + CreateEmail: string
        + MaxCapacity: int
        + StudentDoing: int
        + StudentCompleted: int
    }
    class SearchResult <<DTO>> {
        + Result: object
        + TotalPage: int
        + PageSize: int
        + CurrentPage: int
        + Total: int
    }
}

package "Entities" {
    class Exam {
        + ExamId: string
        + Title: string
        + Description: string
        + Duration: int
        + StartTime: DateTime
        + EndTime: DateTime
        + Status: int
        + RoomId: string
        + Room: Room
        + Creator: User
    }
    class Room {
        + RoomId: string
        + RoomCode: string
        + ClassId: string
        + Class: Class
        + SubjectId: string
        + Subject: Subject
        + RoomUsers: List<RoomUser>
    }
    class Class {
        + ClassId: string
        + ClassCode: string
    }
    class Subject {
        + SubjectId: string
        + SubjectName: string
    }
    class User {
        + UserId: string
        + FullName: string
        + Email: string
    }
    class RoomUser {
        + UserId: string
        + RoleId: int
        + Status: int
    }
    class StudentExam {
        + StudentExamId: string
        + ExamId: string
        + StudentId: string
        + Status: int
    }
}

package "Enums" {
    enum RoleEnum {
        Admin
        Lecture
        Student
    }
    enum ExamStatus {
        Draft
        Published
        Cancelled
        Archived
    }
    enum ActiveStatus {
        Inactive
        Active
    }
    enum StudentExamStatus {
        InProgress
        Submitted
    }
}

' Relationships
MonitoringController ..> IMonitoringService : <<uses>>
MonitoringController ..> MonitorExamSearchVM : <<uses>>
IMonitoringService <|.. MonitoringService
MonitoringService ..> Exam : <<uses>>
MonitoringService ..> Room : <<uses>>
MonitoringService ..> Class : <<uses>>
MonitoringService ..> Subject : <<uses>>
MonitoringService ..> User : <<uses>>
MonitoringService ..> RoomUser : <<uses>>
MonitoringService ..> StudentExam : <<uses>>
MonitoringService ..> MonitorExamsVM : <<maps to>>
MonitorExamSearchVM --|> SearchRequestVM
Exam o-- Room : <<has>>
Exam o-- User : <<created by>>
Room o-- Class : <<has>>
Room o-- Subject : <<has>>
Room o-- RoomUser : <<has>>
StudentExam o-- Exam : <<for>>
RoomUser ..> ActiveStatus : <<uses>>
StudentExam ..> StudentExamStatus : <<uses>>
MonitorExamsVM ..> ExamStatus : <<uses>>
MonitorExamsVM ..> RoleEnum : <<uses>>
SearchResult o-- MonitorExamsVM : <<has>>

@enduml 