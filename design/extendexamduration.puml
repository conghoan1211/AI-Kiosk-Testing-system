@startuml
' Class Diagram for Extend Exam Duration Feature

title Extend Exam Duration Class Diagram

hide empty members
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam defaultFontSize 14
skinparam defaultFontName Arial
skinparam classFontSize 12
skinparam classFontName Arial
skinparam noteFontSize 11
skinparam noteFontName Arial

skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
    FontSize 12
}

skinparam package {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    FontSize 14
    FontStyle bold
}

skinparam interface {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontSize 12
}

skinparam enum {
    BackgroundColor LightCyan
    BorderColor DarkCyan
    FontSize 12
}

package "Controllers" {
    class MonitoringController <<Controller>> {
        - _monitoringService: IMonitoringService
        + AddStudentExtraTime(time: StudentExamExtraTime): Task<IActionResult>
    }
}

package "Services" {
    interface IMonitoringService <<Interface>> {
        + AddStudentExtraTime(time: StudentExamExtraTime, usertoken: string): Task<string>
    }
    class MonitoringService <<Service>> {
        - _context: DbContext
        - _examHub: ExamHub
        - _log: ILog
        + AddStudentExtraTime(time: StudentExamExtraTime, usertoken: string): Task<string>
    }
    class ExamHub {
        + SendExtraTimeToGroup(groupName: string, data: object): Task
    }
    interface ILog <<Interface>> {
        + WriteActivity(log: AddUserLogVM): Task<string>
    }
}

package "Models & DTOs" {
    class StudentExamExtraTime <<DTO>> {
        + StudentExamId: string
        + ExtraMinutes: int
    }
    class AddUserLogVM <<DTO>> {
        + ActionType: string
        + UserId: string
        + Description: string
        + Metadata: string
        + ObjectId: string
        + Status: int
    }
}

package "Entities" {
    class StudentExam {
        + StudentExamId: string
        + StudentId: string
        + ExamId: string
        + Status: int
        + StartTime: DateTime?
        + SubmitTime: DateTime?
        + ExtraTimeMinutes: int?
        + UpdatedAt: DateTime
        + Exam: Exam
        + User: User
    }
    class Exam {
        + ExamId: string
        + Title: string
        + Duration: int
    }
    class User {
        + UserId: string
        + UserCode: string
    }
}

package "Enums" {
    enum LogStatus {
        Success
        Failed
    }
    enum StudentExamStatus {
        InProgress
        Submitted
    }
}

' Relationships
MonitoringController ..> IMonitoringService : <<uses>>
MonitoringController ..> StudentExamExtraTime : <<uses>>
IMonitoringService <|.. MonitoringService
MonitoringService ..> StudentExam : <<queries/updates>>
MonitoringService ..> Exam : <<uses>>
MonitoringService ..> User : <<uses>>
MonitoringService ..> ExamHub : <<notifies>>
MonitoringService ..> ILog : <<logs>>
MonitoringService ..> AddUserLogVM : <<logs>>
StudentExam o-- Exam : <<for>>
StudentExam o-- User : <<for>>
StudentExam ..> StudentExamStatus : <<uses>>
AddUserLogVM ..> LogStatus : <<uses>>

@enduml 