@startuml
' Class Diagram for Create Exam Feature (with Observer Pattern)

' Rút gọn, sát hình, dễ nhìn
left to right direction
hide empty members
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam defaultFontSize 12
skinparam classFontSize 11
skinparam noteFontSize 10
skinparam classAttributeIconSize 0
skinparam Padding 2
skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
    FontSize 11
}
skinparam package {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    FontSize 12
    FontStyle bold
}
skinparam interface {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontSize 11
}
skinparam enum {
    BackgroundColor LightCyan
    BorderColor DarkCyan
    FontSize 11
}

package "Controllers" {
    class ExamController <<Controller>> {
        - _examService: IExamService
        + CreateExam(request: AddExamRequest)
    }
}

package "Services" {
    interface IExamService <<Interface>> {
        + Handle(request: AddExamRequest, userId: string)
    }
    class ExamService <<Service>> {
        - _context: Sep490Context
        - _unitOfWork: IUnitOfWork
        - _subject: IExamSubject
        + Handle(request: AddExamRequest, userId: string)
    }
}

package "Observer" {
    interface IExamObserver {
        + OnExamAdded(exam: Exam, userId: string)
    }
}

package "Subject" {
    interface IExamSubject {
        + Attach(observer: IExamObserver)
        + Detach(observer: IExamObserver)
        + Notify(exam: Exam, userId: string)
    }
}

package "UnitOfWork" {
    interface IUnitOfWork {
        + Exams: IExamRepository
        + Rooms: IRoomRepository
        + QuestionBanks: IQuestionBankRepository
        + ExamQuestions: IExamQuestionRepository
        + ExamSupervisors: IExamSupervisorRepository
        + SaveChangesAsync()
        + BeginTransactionAsync()
        + CommitTransactionAsync()
        + RollbackTransactionAsync()
    }
}

package "Repositories" {
    interface IExamRepository {
        + AddAsync(exam: Exam)
    }
    interface IRoomRepository {
        + ExistsAsync(roomId: string): Task<bool>
    }
    interface IQuestionBankRepository {
        + GetWithQuestionsAsync(id: string)
    }
    interface IExamQuestionRepository {
        + AddAsync(examQuestion: ExamQuestion)
    }
    interface IExamSupervisorRepository {
        + AddAsync(examSupervisor: ExamSupervisor)
    }
}

package "Models & DTOs" {
    class AddExamRequest <<DTO>> {
        + QuestionBankId
        + RoomId
        + QuestionIds
        + Title
        + Description
        + Duration
        + StartTime
        + EndTime
        + IsShowResult
        + IsShowCorrectAnswer
        + Status
        + ExamType
        + GuideLines
    }
    class AddUserLogVM <<DTO>> {
        + UserId
        + ActionType
        + ObjectId
        + Status
    }
}

package "Enums" {
    enum LogStatus {
        Success
        Failed
    }
}

' Relationships
ExamController ..> IExamService : <<uses>>
ExamController ..> AddExamRequest : <<uses>>
IExamService <|.. ExamService : <<implements>>
ExamService ..> IUnitOfWork : <<uses>>
ExamService ..> IExamSubject : <<notifies>>
ExamService ..> AddExamRequest : <<uses>>
IUnitOfWork ..> IExamRepository : <<has>>
IUnitOfWork ..> IRoomRepository : <<has>>
IUnitOfWork ..> IQuestionBankRepository : <<has>>
IUnitOfWork ..> IExamQuestionRepository : <<has>>
IUnitOfWork ..> IExamSupervisorRepository : <<has>>
AddUserLogVM ..> LogStatus : <<uses>>
IExamSubject ..> IExamObserver : <<observer>>

@enduml 