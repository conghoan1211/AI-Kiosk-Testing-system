@startuml
title Send Recording (Face Capture) â€” Sequence Diagram 

actor "User" as Client
boundary ":FaceCaptureUI" as UI <<boundary>>
control "FaceCaptureController" as Controller <<controller>>
participant ":FaceCaptureService" as Service <<service>>
participant ":S3Service" as S3 <<service>>

entity "StudentExamRepository" as StuExamRepo <<repository>>
entity "ExamRepository" as ExamRepo <<repository>>
entity "FaceCaptureRepository" as FaceRepo <<repository>>

database "Database" as DB

== Send Recording ==

Client -> UI: Checked detect (face error / info)
activate UI
UI -> Controller: POST /face-captures/add (FaceCaptureRequest)
activate Controller

alt User not authenticated
  Controller -> Controller: Log unauthorized access
  Controller --> UI: 401 Unauthorized { message: "User not authenticated" }
  deactivate Controller
  UI --> Client: Show unauthorized
  deactivate UI
else User authenticated
  Controller -> Service: AddCapture(input, userId)
  activate Service

  ' --- Verify student exam is in progress ---
  Service -> StuExamRepo: GetByIdInProgress(input.StudentExamId, userId)
  activate StuExamRepo
  StuExamRepo -> DB: SELECT ... FROM StudentExams WHERE Id=@id AND StudentId=@uid AND Status='InProgress'
  DB --> StuExamRepo: studentExam | null
  StuExamRepo --> Service: studentExam | null
  deactivate StuExamRepo

  alt StudentExam not found
    Service --> Controller: 400 BadRequest { success:false, message:"StudentExam not found or not in progress." }
    deactivate Service
    Controller --> UI: 400 BadRequest
    deactivate Controller
    UI --> Client: Show error
    deactivate UI
  else StudentExam OK
    ' --- Check exam existence ---
    Service -> ExamRepo: GetById(studentExam.ExamId)
    activate ExamRepo
    ExamRepo -> DB: SELECT Id FROM Exams WHERE Id=@examId
    DB --> ExamRepo: exam | null
    ExamRepo --> Service: exam | null
    deactivate ExamRepo

    alt Exam not found
      Service --> Controller: 400 BadRequest { success:false, message:"Exam not found." }
      deactivate Service
      Controller --> UI: 400 BadRequest
      deactivate Controller
      UI --> Client: Show error
      deactivate UI
    else Exam found
      ' --- Upload image to S3 ---
      Service -> S3: UploadFileAsync(key, input.ImageCapture)
      activate S3
      alt Upload error
        S3 --> Service: Exception / null
        deactivate S3
        Service --> Controller: 400 BadRequest { success:false, message:"Upload failed." }
        deactivate Service
        Controller --> UI: 400 BadRequest
        deactivate Controller
        UI --> Client: Show error
        deactivate UI
      else Upload success
        S3 --> Service: imageUrl
        deactivate S3

        ' --- Persist face capture ---
        Service -> FaceRepo: Add(FaceCapture{ StudentExamId, Url=imageUrl, ... })
        activate FaceRepo
        FaceRepo -> DB: INSERT INTO FaceCaptures(...)
        DB --> FaceRepo: inserted
        FaceRepo --> Service: ok
        deactivate FaceRepo

        Service --> Controller: 200 OK { success:true, message:"Capture saved." }
        deactivate Service
        Controller --> UI: 200 OK
        deactivate Controller
        UI --> Client: Show success
        deactivate UI
      end
    end
  end
end

' --- Safety net ---
alt Exception
  Service --> Controller: 400 BadRequest { success:false, message:"Error saving capture." }
  deactivate Service
  Controller --> UI: 400 BadRequest
  deactivate Controller
  UI --> Client: Show error
  deactivate UI
end
@enduml
