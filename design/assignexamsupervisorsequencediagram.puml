@startuml

title Assign Exam Supervisor Sequence Diagram

actor "User" as Client
boundary "c:ExamSupervisorController" as Controller
control "s:ExamSupervisorService" as Service
database "Database" as DB
control "LogService" as Log

== Assign Exam Supervisor ==

Client -> Controller: POST /assign-supervisor (EditExamSupervisorVM)
activate Controller

alt User not authenticated
    Controller -> Controller: Log unauthorized access attempt
    Controller --> Client: 401 Unauthorized { message: "User not authenticated." }
    deactivate Controller
else User authenticated
    Controller -> Service: AssignSupervisor(input, usertoken)
    activate Service

    Service -> DB: Begin transaction
    activate DB
    DB --> Service: Transaction started
    deactivate DB

    Service -> DB: Get ExamSupervisors (ExamId)
    activate DB
    alt No ExamSupervisor found
        DB --> Service: Not found
        deactivate DB
        Service --> Controller: ("No ExamSupervisor found for this exam.", null)
        deactivate Service
        Controller --> Client: 400 BadRequest { success: false, message }
        deactivate Controller
    else Found
        DB --> Service: List<ExamSupervisor>
        deactivate DB

        Service -> DB: Get Users (SupervisorId)
        activate DB
        alt No users found
            DB --> Service: Not found
            deactivate DB
            Service --> Controller: ("No users found with the provided SupervisorId.", null)
            deactivate Service
            Controller --> Client: 400 BadRequest { success: false, message }
            deactivate Controller
        else Users found
            DB --> Service: List<User>
            deactivate DB

            Service -> Service: Check supervisor roles
            alt Some users are only Student
                Service --> Controller: ("Users ... have Student role.", null)
                deactivate Service
                Controller --> Client: 400 BadRequest { success: false, message }
                deactivate Controller
            else Valid supervisors
                Service -> Service: Check new supervisors to add
                alt No new supervisor to add
                    Service --> Controller: ("No new supervisor to add", null)
                    deactivate Service
                    Controller --> Client: 400 BadRequest { success: false, message }
                    deactivate Controller
                else Add supervisors
                    Service -> DB: Add new ExamSupervisors
                    activate DB
                    DB --> Service: Added
                    deactivate DB

                    Service -> Log: WriteActivity(AddUserLogVM)
                    activate Log
                    alt Log error
                        Log --> Service: Error message
                        deactivate Log
                        Service --> Controller: (msg, null)
                        deactivate Service
                        Controller --> Client: 400 BadRequest { success: false, message }
                        deactivate Controller
                    else Log success
                        Log --> Service: ""
                        deactivate Log
                        Service -> DB: Commit transaction
                        activate DB
                        DB --> Service: Committed
                        deactivate DB
                        Service --> Controller: ("", SupervisorId)
                        deactivate Service
                        Controller --> Client: 200 OK { success: true, message, data }
                        deactivate Controller
                    end alt
                end alt
            end alt
        end alt
    end alt
    alt Exception
        Service -> DB: Rollback transaction
        activate DB
        DB --> Service: Rolled back
        deactivate DB
        Service --> Controller: ("Error updating supervisor list: ...", null)
        deactivate Service
        Controller --> Client: 400 BadRequest { success: false, message }
        deactivate Controller
    end alt
end alt

@enduml 