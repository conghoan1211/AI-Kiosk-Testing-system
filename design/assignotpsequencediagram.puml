@startuml

title Assign OTP Sequence Diagram

actor "User" as Client
boundary "c:ExamController" as Controller
control "s:ExamService" as Service
database "Database" as DB

== Assign OTP ==

Client -> Controller: POST /assign-otp (CreateExamOtpVM)
activate Controller

alt User not authenticated
    Controller -> Controller: Log unauthorized access attempt
    Controller --> Client: 401 Unauthorized { message: "User not authenticated." }
    deactivate Controller
else User authenticated
    Controller -> Service: AssignOTP(input, usertoken)
    activate Service

    Service -> DB: Check user role and permissions (UserId, RoleId)
    activate DB
    alt User is not allowed
        DB --> Service: Not found or invalid role
        deactivate DB
        Service -> Service: Log authorization failure
        Service --> Controller: ("You do not have permission to assign OTP.", null)
        deactivate Service
        Controller --> Client: 403 Forbidden { success: false, message }
        deactivate Controller
    else User is allowed
        DB --> Service: User role confirmed
        deactivate DB

        Service -> DB: Get Exam (ExamId, Status=Published, include Room)
        activate DB
        alt Exam not found or not active
            DB --> Service: Not found
            deactivate DB
            Service --> Controller: ("Exam not found or not active.", null)
            deactivate Service
            Controller --> Client: 400 BadRequest { success: false, message }
            deactivate Controller
        else Exam found
            DB --> Service: Exam
            deactivate DB
            alt Exam has already ended
                Service --> Controller: ("Exam has already ended.", null)
                deactivate Service
                Controller --> Client: 400 BadRequest { success: false, message }
                deactivate Controller
            else Exam is active
                Service -> Service: Generate 6-digit OTP
                Service -> DB: Get ExamOtp by ExamId
                activate DB
                alt ExamOtp not found
                    DB --> Service: Not found
                    deactivate DB
                    Service -> DB: Add new ExamOtp
                    activate DB
                    DB --> Service: Added
                    deactivate DB
                else ExamOtp exists
                    DB --> Service: Found
                    deactivate DB
                    Service -> DB: Update ExamOtp
                    activate DB
                    DB --> Service: Updated
                    deactivate DB
                end alt
                Service -> DB: SaveChanges
                activate DB
                DB --> Service: Saved
                deactivate DB
                Service --> Controller: ("", ExamOtpVM)
                deactivate Service
                Controller --> Client: 200 OK { success: true, message, data }
                deactivate Controller
            end alt
        end alt
    end alt
end alt

@enduml 