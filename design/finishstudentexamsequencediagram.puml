@startuml

title Finish Student Exam Sequence Diagram

actor "User" as Client
boundary "c:MonitoringController" as Controller
control "s:MonitoringService" as Service
database "Database" as DB
control "ExamHub" as Hub
control "LogService" as Log

== Finish Student Exam ==

Client -> Controller: POST /finish-student-exam (FinishStudentExam)
activate Controller

alt User not authenticated
    Controller -> Controller: Log unauthorized access attempt
    Controller --> Client: 401 Unauthorized { success: false, message: "User not authenticated." }
    deactivate Controller
else User authenticated
    Controller -> Service: FinishStudentExam(finish, usertoken)
    activate Service

    Service -> DB: Check user role and permissions (UserId, RoleId)
    activate DB
    alt User is not allowed
        DB --> Service: Not found or invalid role
        deactivate DB
        Service -> Service: Log authorization failure
        Service --> Controller: "You do not have permission to finish student exam."
        deactivate Service
        Controller --> Client: 403 Forbidden { success: false, message }
        deactivate Controller
    else User is allowed
        DB --> Service: User role confirmed
        deactivate DB

        Service -> DB: Begin transaction
        activate DB
        DB --> Service: Transaction started
        deactivate DB

        Service -> DB: Get StudentExam (StudentExamId, ExamId, Status=InProgress, include Exam)
        activate DB
        alt StudentExam not found or already submitted
            DB --> Service: Not found
            deactivate DB
            Service --> Controller: "Student exam not found or already submitted."
            deactivate Service
            Controller --> Client: 400 BadRequest { success: false, message }
            deactivate Controller
        else StudentExam found
            DB --> Service: StudentExam
            deactivate DB
            Service -> DB: Get StudentAnswers (StudentExamId)
            activate DB
            DB --> Service: List<StudentAnswer>
            deactivate DB
            alt ExamType != Essay
                Service -> DB: Get ExamQuestions (ExamId, QuestionId in answers, include Question)
                activate DB
                DB --> Service: Dictionary<QuestionId, ExamQuestion>
                deactivate DB
                Service -> Service: Grade answers, update IsCorrect, PointsEarned, totalScore
                Service -> DB: UpdateRange StudentAnswers
                activate DB
                DB --> Service: Updated
                deactivate DB
            end alt
            Service -> Service: Update StudentExam (Status, Score, SubmitTime, UpdatedAt, TotalQuestions)
            Service -> DB: Update StudentExam
            activate DB
            DB --> Service: Updated
            deactivate DB
            Service -> DB: SaveChanges
            activate DB
            DB --> Service: Saved
            deactivate DB
            Service -> Log: WriteActivity(AddUserLogVM)
            activate Log
            Log --> Service: msg
            deactivate Log
            alt Log error
                Service -> DB: Rollback transaction
                activate DB
                DB --> Service: Rolled back
                deactivate DB
                Service --> Controller: msg
                deactivate Service
                Controller --> Client: 400 BadRequest { success: false, message }
                deactivate Controller
            else Log success
                Service -> DB: Commit transaction
                activate DB
                DB --> Service: Committed
                deactivate DB
                Service -> Hub: SendAsync(FINISH_STUDENT_EXAM, ...)
                activate Hub
                Hub --> Service: Sent
                deactivate Hub
                Service --> Controller: ""
                deactivate Service
                Controller --> Client: 200 OK { success: true, message }
                deactivate Controller
            end alt
        end alt
        alt Exception
            Service -> DB: Rollback transaction
            activate DB
            DB --> Service: Rolled back
            deactivate DB
            Service --> Controller: "Error during finish student exam: ..."
            deactivate Service
            Controller --> Client: 400 BadRequest { success: false, message }
            deactivate Controller
        end alt
    end alt
end alt

@enduml 