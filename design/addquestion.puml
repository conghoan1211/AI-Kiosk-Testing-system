@startuml
' Class Diagram for AddQuestion Feature

title AddQuestion Class Diagram

hide empty members
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam defaultFontSize 14
skinparam defaultFontName Arial
skinparam classFontSize 12
skinparam classFontName Arial
skinparam noteFontSize 11
skinparam noteFontName Arial

skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
    FontSize 12
}

skinparam package {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    FontSize 14
    FontStyle bold
}

skinparam interface {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontSize 12
}

skinparam enum {
    BackgroundColor LightCyan
    BorderColor DarkCyan
    FontSize 12
}

package "Controllers" {
    class QuestionController <<Controller>> {
        - _questionService: IQuestionService
        + AddQuestion(request: AddQuestionRequest): Task<IActionResult>
    }
}

package "Services" {
    interface IQuestionService <<Interface>> {
        + AddQuestionAsync(request: AddQuestionRequest, userId: string): Task<(bool, string)>
    }
    class QuestionService <<Service>> {
        - _context: DbContext
        + AddQuestionAsync(request: AddQuestionRequest, userId: string): Task<(bool, string)>
    }
}

package "Models & DTOs" {
    class AddQuestionRequest <<DTO>> {
        + QuestionBankId: string
        + SubjectId: string
        + Content: string
        + Type: int
        + DifficultLevel: int
        + Point: decimal
        + Options: List<string>
        + CorrectAnswer: string
        + Explanation: string
        + ObjectFile: string
        + Tags: string
        + Description: string
    }
}

package "Entities" {
    class Question {
        + QuestionId: string
        + SubjectId: string
        + QuestionBankId: string
        + Content: string
        + Type: int
        + DifficultLevel: int
        + Point: decimal
        + Options: string
        + CorrectAnswer: string
        + Explanation: string
        + ObjectFile: string
        + Status: int
        + CreateUser: string
        + UpdateUser: string
        + CreatedAt: DateTime
        + UpdatedAt: DateTime
    }
    class QuestionBank {
        + QuestionBankId: string
    }
    class Subject {
        + SubjectId: string
    }
    class User {
        + UserId: string
        + UserRoles: List<UserRole>
    }
    class UserRole {
        + RoleId: int
    }
}

package "Enums" {
    enum RoleEnum {
        Lecture
        Admin
    }
    enum QuestionType {
        Essay
        MultipleChoice
        TrueFalse
        FillInTheBlank
    }
    enum DifficultLevelEnum {
        Easy
        Medium
        Hard
        VeryHard
    }
}

' Relationships
QuestionController ..> IQuestionService : <<uses>>
QuestionController ..> AddQuestionRequest : <<uses>>
IQuestionService <|.. QuestionService
QuestionService ..> Question : <<creates>>
QuestionService ..> AddQuestionRequest : <<uses>>
QuestionService ..> User : <<checks permission>>
QuestionService ..> QuestionBank : <<checks existence>>
QuestionService ..> Subject : <<checks existence>>
User "1" o-- "*" UserRole : has
Question --> QuestionBank : <<for>>
Question --> Subject : <<for>>
Question --> User : <<created by>>
UserRole ..> RoleEnum

@enduml 