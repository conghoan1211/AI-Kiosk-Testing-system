@startuml
' Class Diagram for Finish Student Exam Feature

title Finish Student Exam Class Diagram

hide empty members
skinparam packageStyle rectangle
skinparam linetype ortho
skinparam defaultFontSize 14
skinparam defaultFontName Arial
skinparam classFontSize 12
skinparam classFontName Arial
skinparam noteFontSize 11
skinparam noteFontName Arial

skinparam class {
    BackgroundColor LightBlue
    BorderColor DarkBlue
    ArrowColor DarkBlue
    FontSize 12
}

skinparam package {
    BackgroundColor LightYellow
    BorderColor DarkOrange
    FontSize 14
    FontStyle bold
}

skinparam interface {
    BackgroundColor LightGreen
    BorderColor DarkGreen
    FontSize 12
}

skinparam enum {
    BackgroundColor LightCyan
    BorderColor DarkCyan
    FontSize 12
}

package "Controllers" {
    class MonitoringController <<Controller>> {
        - _monitoringService: IMonitoringService
        + FinishStudentExam(finish: FinishStudentExam): Task<IActionResult>
    }
}

package "Services" {
    interface IMonitoringService <<Interface>> {
        + FinishStudentExam(finish: FinishStudentExam, usertoken: string): Task<string>
    }
    class MonitoringService <<Service>> {
        - _context: DbContext
        - _examHub: ExamHub
        - _log: ILog
        + FinishStudentExam(finish: FinishStudentExam, usertoken: string): Task<string>
    }
    class ExamHub {
        + SendFinishStudentExamToGroup(groupName: string, data: object): Task
    }
    interface ILog <<Interface>> {
        + WriteActivity(log: AddUserLogVM): Task<string>
    }
}

package "Models & DTOs" {
    class FinishStudentExam <<DTO>> {
        + ExamId: string
        + StudentExamId: string
    }
    class AddUserLogVM <<DTO>> {
        + ActionType: string
        + UserId: string
        + Description: string
        + Metadata: string
        + ObjectId: string
        + Status: int
    }
}

package "Entities" {
    class StudentExam {
        + StudentExamId: string
        + ExamId: string
        + StudentId: string
        + Status: int
        + Score: decimal?
        + SubmitTime: DateTime?
        + UpdatedAt: DateTime
        + TotalQuestions: int?
        + Exam: Exam
        + User: User
    }
    class Exam {
        + ExamId: string
        + Title: string
        + ExamType: int
    }
    class User {
        + UserId: string
        + UserCode: string
    }
    class StudentAnswer {
        + StudentExamId: string
        + QuestionId: string
        + UserAnswer: string
        + IsCorrect: bool?
        + PointsEarned: decimal?
        + UpdatedAt: DateTime
    }
    class ExamQuestion {
        + ExamId: string
        + QuestionId: string
        + Points: decimal
        + Question: Question
    }
    class Question {
        + QuestionId: string
        + CorrectAnswer: string
    }
}

package "Enums" {
    enum LogStatus {
        Success
        Failed
    }
    enum StudentExamStatus {
        InProgress
        Submitted
    }
    enum QuestionTypeChoose {
        Essay
        MultipleChoice
        TrueFalse
        FillInTheBlank
    }
}

' Relationships
MonitoringController ..> IMonitoringService : <<uses>>
MonitoringController ..> FinishStudentExam : <<uses>>
IMonitoringService <|.. MonitoringService
MonitoringService ..> StudentExam : <<queries/updates>>
MonitoringService ..> StudentAnswer : <<queries/updates>>
MonitoringService ..> ExamQuestion : <<queries>>
MonitoringService ..> Question : <<uses>>
MonitoringService ..> Exam : <<uses>>
MonitoringService ..> User : <<uses>>
MonitoringService ..> ExamHub : <<notifies>>
MonitoringService ..> ILog : <<logs>>
MonitoringService ..> AddUserLogVM : <<logs>>
StudentExam o-- Exam : <<for>>
StudentExam o-- User : <<for>>
StudentExam ..> StudentExamStatus : <<uses>>
StudentExam ..> LogStatus : <<logs>>
StudentAnswer o-- StudentExam : <<for>>
StudentAnswer o-- ExamQuestion : <<for>>
ExamQuestion o-- Question : <<has>>
AddUserLogVM ..> LogStatus : <<uses>>
Exam ..> QuestionTypeChoose : <<uses>>

@enduml 