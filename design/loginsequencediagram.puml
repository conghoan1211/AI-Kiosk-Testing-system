@startuml

title Login Sequence Diagram

actor "User" as Client

boundary "c:AuthenController" as Controller
control "s:AuthenticateService" as Service
control "u:JwtAuthentication" as JwtUtil
database "Database" as DB
participant "Google Auth Service" as Google

== Traditional Login ==

Client -> Controller: POST /api/auth/login (UserLogin DTO)
activate Controller

Controller -> Service: DoLogin(userLogin)
activate Service

Service -> DB: Find User, validate credentials, campus & status
activate DB
DB --> Service: Return User Entity or null
deactivate DB

alt Login Success (user valid)
    Service -> DB: Update User Status, LastLogin, etc.
    activate DB
    DB --> Service: Confirm Update
    deactivate DB
    
    Service -> DB: Get User Roles
    activate DB
    DB --> Service: Return Role IDs
    deactivate DB

    Service -> JwtUtil: GenerateJwtToken(userToken)
    activate JwtUtil
    JwtUtil --> Service: return accessToken
    deactivate JwtUtil

    Service --> Controller: return ("", LoginResult)
    deactivate Service

    Controller --> Client: 200 OK (LoginResult)

else Login Failed (Incorrect info, Inactive, etc.)
    Service --> Controller: return (error_msg, null)
    deactivate Service
    Controller --> Client: 400 Bad Request (errorCode: "LOGIN_FAILED")
end

deactivate Controller

== Google Login ==

Client -> Controller: POST /google-callback (Credential, CampusId)
activate Controller

Controller -> Google: ValidateAsync(Credential)
activate Google
Google --> Controller: Return Google User Payload
deactivate Google

alt Google Token is Valid
    Controller -> Service: LoginByGoogle(userInfo, campusId)
    activate Service

    Service -> DB: Find User by Email/GoogleId
    activate DB
    DB --> Service: Return User Entity or null
    deactivate DB

    alt User Exists & is Valid (correct FPT email, campus, active status)
        Service -> DB: Update User info (Avatar, LastLogin, etc.)
        activate DB
        DB --> Service: Confirm Update
        deactivate DB

        Service -> DB: Get User Roles
        activate DB
        DB --> Service: Return Role IDs
        deactivate DB

        Service -> JwtUtil: GenerateJwtToken(userToken)
        activate JwtUtil
        JwtUtil --> Service: return accessToken
        deactivate JwtUtil

        Service --> Controller: return ("", LoginResult)
        deactivate Service
        
        Controller --> Client: 200 OK (LoginResult)
    else User Invalid or Not Authorized
        Service --> Controller: return (error_msg, null)
        deactivate Service
        Controller --> Client: 400 Bad Request (error_msg)
    end
else Invalid Google Token (Exception)
    Controller --> Client: 500 Internal Server Error
end
deactivate Controller

@enduml
