@startuml

title Change Exam Status Sequence Diagram

actor "User" as Client
boundary "c:ExamController" as Controller
control "s:ExamService" as Service
database "Database" as DB

== Change Exam Status ==

Client -> Controller: POST /{examId}/status (ChangeStatusRequest)
activate Controller

alt User not authenticated
    Controller -> Controller: Log unauthorized access attempt
    Controller --> Client: 401 Unauthorized { success: false, message: "User not authenticated." }
    deactivate Controller
else User authenticated
    Controller -> Service: ChangeExamStatusAsync(examId, newStatus, userId)
    activate Service

    Service -> DB: Check user is lecturer or admin (UserId, RoleId)
    activate DB
    alt User is not allowed
        DB --> Service: Not found
        deactivate DB
        Service -> Service: Log authorization failure
        Service --> Controller: (false, "User does not have permission to change exam status.")
        deactivate Service
        Controller --> Client: 403 Forbidden { message }
        deactivate Controller
    else User is allowed
        DB --> Service: Found
        deactivate DB

        Service -> DB: Get Exam (examId)
        activate DB
        alt Exam not found
            DB --> Service: Not found
            deactivate DB
            Service --> Controller: (false, "Exam not found.")
            deactivate Service
            Controller --> Client: 400 BadRequest { message }
            deactivate Controller
        else Exam found
            DB --> Service: Exam
            deactivate DB

            Service -> Service: Check status constraints
            alt Exam is ongoing
                Service --> Controller: (false, "Cannot change status while the exam is ongoing.")
                deactivate Service
                Controller --> Client: 400 BadRequest { message }
                deactivate Controller
            else Exam completed and trying to publish
                Service --> Controller: (false, "Cannot publish an exam that has already been completed.")
                deactivate Service
                Controller --> Client: 400 BadRequest { message }
                deactivate Controller
            else Exam cancelled and trying to publish
                Service --> Controller: (false, "Cannot publish a cancelled exam.")
                deactivate Service
                Controller --> Client: 400 BadRequest { message }
                deactivate Controller
            else Same status
                Service --> Controller: (false, "Exam is already in status: {newStatus}.")
                deactivate Service
                Controller --> Client: 400 BadRequest { message }
                deactivate Controller
            else Valid status change
                Service -> DB: Update Exam status
                activate DB
                DB --> Service: Updated
                deactivate DB
                Service -> DB: SaveChanges
                activate DB
                DB --> Service: Saved
                deactivate DB
                Service --> Controller: (true, "Exam status changed to {newStatus} successfully.")
                deactivate Service
                Controller --> Client: 200 OK { message }
                deactivate Controller
            end alt
        end alt
    end alt
end alt

@enduml 