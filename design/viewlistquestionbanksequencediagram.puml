@startuml

title View List Question Bank Sequence Diagram

actor "User" as Client
boundary "c:QuestionBankController" as Controller
control "s:QuestionBankService" as Service
database "Database" as DB

== View List Question Bank ==

Client -> Controller: GET /get-list (QuestionBankFilterVM)
activate Controller

alt User not authenticated
    Controller -> Controller: Log unauthorized access attempt
    Controller --> Client: 401 Unauthorized { message: "User not authenticated" }
    deactivate Controller
else User authenticated
    Controller -> Service: GetList(input, usertoken)
    activate Service

    Service -> DB: Check user role and permissions (UserId, RoleId)
    activate DB
    alt User is not authorized
        DB --> Service: Not found or invalid role
        deactivate DB
        Service -> Service: Log authorization failure
        Service --> Controller: ("You do not have permission to access question banks.", null)
        deactivate Service
        Controller --> Client: 403 Forbidden { success: false, message }
        deactivate Controller
    else User is authorized
        DB --> Service: User role confirmed
        deactivate DB

        Service -> DB: Query QuestionBanks (include Subject, CreatedByUser)
        activate DB
        DB --> Service: IQueryable<QuestionBank>
        deactivate DB

        Service -> Service: Apply filters (TextSearch, Status, IsMyQuestion)
        Service -> Service: Count total, calculate totalPage
        Service -> Service: Get QuestionBankIds for paging
        Service -> DB: Get question counts by type (QuestionBankId)
        activate DB
        DB --> Service: List<QuestionCounts>
        deactivate DB

        Service -> Service: Calculate statistics (TotalQuestionBanks, TotalQuestionsQB, TotalSubjects, TotalSharedQB)
        Service -> DB: Get paged QuestionBankListVMs
        activate DB
        DB --> Service: List<QuestionBankListVM>
        deactivate DB

        alt No question banks found
            Service --> Controller: ("No found any question bank", null)
            deactivate Service
            Controller --> Client: 400 BadRequest { success: false, message }
            deactivate Controller
        else Question banks found
            Service -> Service: Wrap in QuestionBankListResponse
            Service --> Controller: ("", QuestionBankListResponse)
            deactivate Service
            Controller --> Client: 200 OK { success: true, message, data }
            deactivate Controller
        end alt
    end
end

@enduml 