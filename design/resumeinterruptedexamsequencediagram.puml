@startuml

title Resume Interrupted Exam Sequence Diagram

actor "User" as Client
boundary "c:StudentExamController" as Controller
control "s:StudentExamService" as Service
database "Database" as DB

== Resume Interrupted Exam ==

Client -> Controller: GET /get-saved-answers/{examId}
activate Controller

alt User not authenticated
    Controller -> Controller: Log unauthorized access attempt
    Controller --> Client: 401 Unauthorized { message: "User not authenticated" }
    deactivate Controller
else User authenticated
    Controller -> Service: GetSavedAnswers(examId, usertoken)
    activate Service

    Service -> DB: Check user role and permissions (UserId, RoleId)
    activate DB
    alt User is not student
        DB --> Service: Not found or invalid role
        deactivate DB
        Service -> Service: Log authorization failure
        Service --> Controller: ("You do not have permission to access student exams.", null)
        deactivate Service
        Controller --> Client: 403 Forbidden { success: false, message }
        deactivate Controller
    else User is student
        DB --> Service: User role confirmed
        deactivate DB

        Service -> DB: Get StudentExam with Exam (ExamId, StudentId, Status=InProgress)
        activate DB
        alt StudentExam not found
            DB --> Service: Not found
            deactivate DB
            Service --> Controller: ("You have not started this exam or it has already been submitted.", null)
            deactivate Service
            Controller --> Client: 400 BadRequest { success: false, message }
            deactivate Controller
        else StudentExam found
            DB --> Service: Return StudentExam with Exam
            deactivate DB
            
            Service -> Service: Check Exam.EndTime <= DateTime.Now
            alt Exam has ended
                Service --> Controller: ("Exam has ended, you cannot retrieve answers.", null)
                deactivate Service
                Controller --> Client: 400 BadRequest { success: false, message }
                deactivate Controller
            else Exam still in progress
                Service -> DB: Get StudentAnswers (StudentExamId)
                activate DB
                DB --> Service: Return StudentAnswers
                deactivate DB
                
                Service -> Service: Map to StudentAnswerVM
                Service --> Controller: ("", answers)
                deactivate Service
                Controller --> Client: 200 OK { success: true, message, data }
                deactivate Controller
            end alt
        end alt
    end
end

@enduml 