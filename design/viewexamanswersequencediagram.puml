@startuml

title View Exam Answer Sequence Diagram

actor "Teacher" as Client
boundary "c:ExamController" as Controller
control "s:ExamService" as Service
database "Database" as DB

== View Exam Answer ==

Client -> Controller: GET /view-exam-answer/{examId}/{studentId}
activate Controller

alt User not authenticated
    Controller -> Controller: Log unauthorized access attempt
    Controller --> Client: 401 Unauthorized { message: "User not authenticated" }
    deactivate Controller
else User authenticated
    Controller -> Service: ViewExamAnswer(examId, studentId)
    activate Service

    Service -> DB: Check user role and permissions (UserId, RoleId)
    activate DB
    alt User is not teacher
        DB --> Service: Not found or invalid role
        deactivate DB
        Service -> Service: Log authorization failure
        Service --> Controller: ("You do not have permission to view exam answers.", null)
        deactivate Service
        Controller --> Client: 403 Forbidden { success: false, message }
        deactivate Controller
    else User is teacher
        DB --> Service: User role confirmed
        deactivate DB

        Service -> DB: Get StudentExam (examId, studentId)
        activate DB
        alt StudentExam not found
            DB --> Service: Not found
            deactivate DB
            Service --> Controller: ("StudentExam not found.", null)
            deactivate Service
            Controller --> Client: 400 BadRequest { success: false, message }
            deactivate Controller
        else StudentExam found
            DB --> Service: Return StudentExam
            deactivate DB
            
            Service -> Service: CheckTeacherAccess(examId, teacherId)
            alt Teacher not assigned to exam
                Service -> Service: Log authorization failure
                Service --> Controller: ("You are not assigned to this exam.", null)
                deactivate Service
                Controller --> Client: 403 Forbidden { success: false, message }
                deactivate Controller
            else Teacher assigned to exam
                Service -> DB: Get StudentAnswers (StudentExamId)
                activate DB
                DB --> Service: List<StudentAnswer>
                deactivate DB
                
                loop For each StudentAnswer
                    Service -> DB: Get Question (QuestionId)
                    activate DB
                    DB --> Service: Question
                    deactivate DB
                end loop
                
                Service -> Service: Map to List<ExamAnswerVM>
                Service --> Controller: ("", List<ExamAnswerVM>)
                deactivate Service
                
                alt message.Length > 0
                    Controller --> Client: 400 Bad Request { success: false, message }
                else
                    Controller -> Controller: Log successful access
                    Controller --> Client: 200 OK { success: true, data }
                end
            end
        end
    end
end

deactivate Controller

@enduml 